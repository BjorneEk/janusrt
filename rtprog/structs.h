
// Author: Gustaf Franzen <gustaffranzen@icloud.com>
#ifndef _STRUCTS_H_
#define _STRUCTS_H_
#include "types.h"
#include "sched_structs.h"
#include "heap_structs.h"
#include "mmu_structs.h"

#define OFFSETOF(type, member)  ((size_t)&(((type *)0)->member))
#define OF(_ty, _mem) OFFSETOF(_ty, _mem)
// FILE: mmu.h
//typedef struct {
//	u64 *l0;
//	u64  l0_pa;
//} pt_root_t;
#define PT_ROOT_L0	OF(pt_root_t, l0)
#define PT_ROOT_L0_PA	OF(pt_root_t, l0_pa)
#define PT_ROOT_SIZE	sizeof(pt_root_t)

// FILE: mmu.h
//typedef struct {
//	pt_root_t root;
//	u16  asid;
//} mmu_map_t;
#define MMAP_ROOT	OF(mmu_map_t, root)
#define MMAP_ASID	OF(mmu_map_t, asid)
#define MMAP_SIZE	sizeof(mmu_map_t)

// FILE: sched.h
//typedef JRT_PACKED struct ctx {
//	u64	x[31];
//	u64	sp;
//	u64	pc;
//	u64	pstate;
//
//	u128 vregs[32];
//	u32 fpsr, fpcr;
//	mmu_map_t mmap;
//} ctx_t;
#define CTX_X		OF(ctx_t, x)
#define CTX_SP		OF(ctx_t, sp)
#define CTX_PC		OF(ctx_t, pc)
#define CTX_PSTATE	OF(ctx_t, pstate)
#define CTX_VREGS	OF(ctx_t, vregs)
#define CTX_FPSR	OF(ctx_t, fpsr)
#define CTX_FPCR	OF(ctx_t, fpcr)
#define CTX_MMAP	OF(ctx_t, mmap)
#define CTX_SIZE	sizeof(ctx_t)

// FILE: sched.h
//typedef struct process {
//	u32	pid;
//	state_t	state;
//	int first;
//
//	/* scheduling */
//	u64	wait_until;      /* how long to wait */
//	u64	abs_deadline;   /* base requested deadline */
//	u64	eff_deadline;   /* effective (after inheritance) */
//	u64	wait_start_ns;  /* for fairness */
//	u64	wait_seq;       /* tiebreaker */
//
//	ctx_t ctx;
//
//	void *mem;
//	size_t mem_size;
//
//} proc_t;
#define PROC_CTX	OF(proc_t, ctx)
#define PROC_SIZE	sizeof(proc_t)

// FILE: sched.h
//typedef struct sched {
//	proc_t p0; //kernel proc
//	proc_t *curr;
//	proc_t pb[MAX_PROC];
//	proc_t *free_proc[MAX_PROC];
//	size_t nfree_proc;
//
//	heap_node_t rn[READY_MAX];
//	minheap_t ready;
//	u32 pid;
//} sched_t;
#define SCHED_P0	OF(sched_t, p0)
#define SCHED_CURR	OF(sched_t, curr)
#define SCHED_PID	OF(sched_t, pid)
#define SCHED_SIZE	sizeof(sched_t)

#define SAVE_FP 0
#ifdef AUTOGEN_HEADER
#include <stdio.h>
#include <string.h>
int main(void)
{
	int i;
	char *fn;
	char guard[4096];
	char *dot;

	fn = strdup(__FILE__);
	dot = strchr(fn,'.');
	if (dot)
		*dot = '_';
	snprintf(guard, 4096, "_AUTOGEN_%s_", fn);

	printf("// autogenerated header from file %s\n", __FILE__);
	//printf("#ifndef %s\n", guard);
	//printf("#define %s\n\n", guard);
	printf("	.equ PT_ROOT_L0,	(%llu)\n", PT_ROOT_L0);
	printf("	.equ PT_ROOT_L0_PA,	(%llu)\n",PT_ROOT_L0_PA);
	printf("	.equ PT_ROOT_SIZE,	(%llu)\n",PT_ROOT_SIZE);
	printf("	.equ MMAP_ROOT,		(%llu)\n",MMAP_ROOT);
	printf("	.equ MMAP_ASID,		(%llu)\n",MMAP_ASID);
	printf("	.equ MMAP_SIZE,		(%llu)\n",MMAP_SIZE);
	printf("	.equ CTX_X,		(%llu)\n",CTX_X);
	printf("	.equ CTX_SP,		(%llu)\n",CTX_SP);
	printf("	.equ CTX_PC,		(%llu)\n",CTX_PC);
	printf("	.equ CTX_PSTATE,		(%llu)\n",CTX_PSTATE);
	printf("	.equ CTX_VREGS,		(%llu)\n",CTX_VREGS);
	printf("	.equ CTX_FPSR,		(%llu)\n",CTX_FPSR);
	printf("	.equ CTX_FPCR,		(%llu)\n",CTX_FPCR);
	printf("	.equ CTX_MMAP,		(%llu)\n",CTX_MMAP);
	printf("	.equ CTX_SIZE,		(%llu)\n",CTX_SIZE);
	printf("	.equ PROC_CTX,		(%llu)\n",PROC_CTX);
	printf("	.equ PROC_SIZE,		(%llu)\n",PROC_SIZE);
	printf("	.equ SCHED_P0,		(%llu)\n",SCHED_P0);
	printf("	.equ SCHED_CURR,		(%llu)\n",SCHED_CURR);
	printf("	.equ SCHED_PID,		(%llu)\n",SCHED_PID);
	printf("	.equ SCHED_SIZE,		(%llu)\n",SCHED_SIZE);

	printf("	.extern G_SCHED\n");
	printf("	.extern G_KERNEL_CTX\n");

	//printf("\n#endif /* %s */\n", guard);
}
#endif
#endif
